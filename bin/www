#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("iqarex:server");
var http = require("http");
var models = require("../lib/mongo");
var fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3003");
app.set("port", port);

/**
 * Create HTTP server.
 */
var firstTime = true;
var lastday = 0;
const basedir = "/var/www/iqar/backup/";
// const basedir = "/home/elhassen/Downloads/images/backup/";

setInterval(() => {
  const date = Date.now();
  const hour = new Date(date).getHours();

  // should not excute this function in the same day
  var differentday = new Date(date).getDay() != lastday;

  if ((hour == 0 && differentday) || firstTime) {
    // if the firstTime server run after chut down do it
    firstTime = false;

    // set the function is excuted today
    lastday = new Date(date).getDay();

    savethedb();
    // console.log(models.Models);

    deletebackup();

    // rmdbbackup();
  }
}, 1000);

// backup db everyday
async function savethedb() {
  const date = Date.now();

  // create a backup directory
  var dir = basedir + "dir" + date;
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }
  // save the backup url in the database to delete it if it is old
  const backup = await new models.DBBackup({ url: dir }).save();

  // store all the collections in different files
  for (const Model in models.Models) {
    const posts = await models.Models[Model].find({});
    const name = Model + "";
    fs.writeFileSync(
      dir + "/" + name + ".json",
      Buffer.from(JSON.stringify(posts))
    );
    console.log(name);
  }
}

// delete old backups 2 months ago

async function deletebackup() {
  // the backup is allowed to stay for 2 months
  const max = 60;
  const backups = await models.DBBackup.find({}).sort({ createdAt: 1 });
  if (backups.length >= max) {
    // number of file to delete
    const nd = backups.length - max;
    for (var i = 0; i < nd; i++) {
      const { _id, url } = backups[i];
      fs.rmdirSync(url, { recursive: true });
      const rmbackup = await models.DBBackup.deleteOne({ _id: _id });
    }
  }
}

//

async function rmdbbackup() {
  const backups = await models.DBBackup.deleteMany({});
  console.log(backups);
}

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
